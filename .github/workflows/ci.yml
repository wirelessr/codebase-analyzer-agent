name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  UV_CACHE_DIR: /tmp/.uv-cache

jobs:
  test:
    name: Test on Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
        enable-cache: true

    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}

    - name: Restore uv cache
      uses: actions/cache@v4
      with:
        path: /tmp/.uv-cache
        key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
        restore-keys: |
          uv-${{ runner.os }}-

    - name: Install dependencies
      run: uv sync --all-extras --dev

    - name: Run linting
      run: |
        uv run ruff check src tests
        uv run black --check src tests
        uv run mypy src

    - name: Run unit tests
      run: |
        uv run pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=term

    - name: Upload coverage reports
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Minimize uv cache
      run: uv cache prune --ci

  docs:
    name: Documentation build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up uv
      uses: astral-sh/setup-uv@v3

    - name: Install dependencies
      run: uv sync --all-extras --dev

    - name: Check README format
      run: |
        uv run python -c "
        import markdown
        with open('README.md', 'r') as f:
            content = f.read()
        markdown.markdown(content)
        print('README.md is valid markdown')
        "

    - name: Validate package metadata
      run: |
        uv build
        uv run python -c "
        import tomllib
        with open('pyproject.toml', 'rb') as f:
            data = tomllib.load(f)
        assert data['project']['name']
        assert data['project']['version']
        assert data['project']['description']
        print('Package metadata is valid')
        "
